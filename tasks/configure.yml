---

# Hostname
- import_tasks: ../tasks/hostname.yml
  when: hostname is defined and hostname | length > 0
  ignore_errors: yes
  tags: [ hostname, configure ]

# Kernel
- name: Configure kernel settings
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_set: "yes"
    state: "{{ item.state |default('present') }}"
    reload: "yes"
  with_items:
    - "{{ sysctl_conf }}"
  when: sysctl_conf is defined and sysctl_conf | length > 0
  ignore_errors: yes
  tags: [ sysctl, kernel, configure ]

# Transparent Huge Pages
- name: Disable Transparent Huge Pages | create systemd service "disable-transparent-huge-pages.service"
  blockinfile:
    path: /etc/systemd/system/disable-transparent-huge-pages.service
    create: yes
    block: |
      [Unit]
      Description=Disable Transparent Huge Pages
      DefaultDependencies=no
      After=sysinit.target local-fs.target
      Before=basic.target

      [Service]
      Type=oneshot
      ExecStart=/bin/bash -c 'echo never > /sys/kernel/mm/transparent_hugepage/enabled'
      ExecStart=/bin/bash -c 'echo never > /sys/kernel/mm/transparent_hugepage/defrag'

      [Install]
      WantedBy=basic.target
  when: disable_thp is defined and disable_thp == "true"
  ignore_errors: yes
  tags: disable_thp

- name: Disable Transparent Huge Pages | start disable-transparent-huge-pages service
  systemd:
    daemon_reload: yes
    name: disable-transparent-huge-pages
    state: restarted
    enabled: yes
  when: disable_thp is defined and disable_thp == "true"
  ignore_errors: yes
  tags: [ disable_thp, configure ]


# limits
- name: Increase the max open file limit for "{{limits_user}}" (soft nofile "{{soft_nofile}}", hard nofile "{{hard_nofile}}")
  lineinfile:
    path: /etc/security/limits.conf
    line: |
      {{limits_user}} soft nofile {{soft_nofile}}
      {{limits_user}} hard nofile {{hard_nofile}}
    state: present
  when: set_limits is defined and set_limits == "true"
  ignore_errors: yes
  tags: [ limits, configure ]


# I/O Scheduler
- name: Set I/O Scheduler for device "{% for set in scheduler %}{{ set.device }}{% if not loop.last %},{% endif %}{% endfor %}" | copy systemd service file
  template:
    src: templates/io-scheduler.service.j2
    dest: /etc/systemd/system/io-scheduler.service
  when: (set_scheduler is defined) and (set_scheduler == "true") and (scheduler | length > 0)
  ignore_errors: yes
  tags: [ scheduler, configure ]

- name: Set I/O Scheduler for device "{% for set in scheduler %}{{ set.device }}{% if not loop.last %},{% endif %}{% endfor %}" | start io-scheduler service
  systemd:
    daemon_reload: yes
    name: io-scheduler
    state: restarted
    enabled: yes
  when: (set_scheduler is defined) and (set_scheduler == "true") and (scheduler | length > 0)
  ignore_errors: yes
  tags: [ scheduler, configure ]


# Locales
- import_tasks: ../tasks/locales.yml
  when: locales is defined and locales | length > 0
  ignore_errors: yes
  tags: [ locales, configure ]

# TimeZone
- import_tasks: ../tasks/timezone.yml
  when: timezone is defined and timezone | length > 0
  ignore_errors: yes
  tags: [ timezone, configure ]

# NTP
- import_tasks: ../tasks/ntp.yml
  when: ntp_enabled is defined and ntp_enabled == "true"
  ignore_errors: yes
  tags: [ ntp, configure ]

# SSH Keys
- import_tasks: ../tasks/ssh-keys.yml
  when: enable_SSH_Key_based_authentication is defined and enable_SSH_Key_based_authentication == "true"
  ignore_errors: yes
  tags: [ ssh_keys, configure ]

